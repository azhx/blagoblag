One vulnerability is a tragedy...
=================================

    A million vulnerabilities is a statistic.

*Joseph Stalin*

`Heartbleed`_, `POODLE`_, `Shellshock`_. Giving vulnerabilities names may be
controversial, but there's no doubt it's effective. These, and many other,
vulnerabilities attracted widespread awareness and drove tons of work improving
ecosystem security. Heartbleed drew attention to OpenSSL's small team of
maintainers and drove funding and code quality improvements. POODLE led to
SSLv3 being disabled on clients and servers nearly overnight. Shellshock
directed researchers' attention to ``bash`` and resulted in a series of
vulnerabilities being discovered, including `HTTPoxy`_.

If one vulnerability can cause this much damage, and drive this much industry
change, surely a problem which generates thousands of vulnerabilities should be
able to galvanize our industry around much needed improvements?

The `most recent macOS release`_ fixed 32 vulnerabilities caused by memory
unsafety. The `most recent Google Chrome release`_ fixed 10 vulnerabilities
caused by memory unsafety (not including ones found by Google's internal
fuzzing and auditing efforts). The `most recent Firefox release`_ fixed 38
vulnerabilities caused by memory unsafety. Google's `OSS-Fuzz has found`_ more
than 750 memory unsafety vulnerabilities in popular open source projects.

It's time to admit we have a problem.

Memory unsafety is a scourge plaguing our industry. But because it results in
thousands of vulnerabilities, instead of one flashy one, we don't give it
nearly the attention it deserves. This is, of course, entirely backwards, but
as the title of this post alludes it is also a common cognitive bias.

The last few years have produced significant new tools such as `AFL`_ and
`libFuzzer`_ which make fuzzing more accessible and `ASAN`_ which makes
detecting memory corruption easier. But none of these address the root cause:
the near impossibility of writing code in C and C++ which does not have these
vulnerabilities, and the extreme popularity of these languages in
security-sensitive contexts.

So what should we do? If you're working on an OS kernel or core service, a web
browser, or a network server: start gradually porting your code to a memory
safe language. My personal bet is on `Rust`_, and I'm extremely proud that `my
employer`_ has been investing both in the language and in porting parts of
Firefox to it. If you're starting a new project, build it in a memory safe
language from day one. The programming languages community should invest in
research in how to build more accessible and ergonomic memory safe languages.
And people are welcome to continue researching how to make C/C++ safer; but two
decades after `"Smashing the Stack for Fun and Profit"`_ a
`stack-buffer-overflow in Chrome`_ is still a critical vulnerability, so I'm
not holding my breath.

The first step in solving a problem is admitting you have one. The developers
who build macOS, Firefox, Chrome, other open source projects, and other C/C++
codebases are not dumb, they're not bad developers, but they do have a bad
tool. There are still large portions of our industry who believe C and C++ can
be safe, if developers are simply smarter and work harder. I think the data
makes clear this isn't true. We must address the root cause, and migrate our
critical projects to other, safer, programming languages. This does not need to
happen overnight, porting individual modules or libraries is already a big win,
because it needs to happen.

.. _`Heartbleed`: http://heartbleed.com/
.. _`POODLE`: https://www.openssl.org/~bodo/ssl-poodle.pdf
.. _`Shellshock`: https://en.wikipedia.org/wiki/Shellshock_(software_bug)
.. _`HTTPoxy`: https://httpoxy.org/
.. _`most recent macOS release`: https://support.apple.com/en-us/HT208221
.. _`most recent Google Chrome release`: https://chromereleases.googleblog.com/2017/10/stable-channel-update-for-desktop.html
.. _`most recent Firefox release`: https://www.mozilla.org/en-US/security/advisories/mfsa2017-24/
.. _`OSS-Fuzz has found`: https://bugs.chromium.org/p/oss-fuzz/issues/list?can=1&q=Type%3DBug-Security+&colspec=ID+Type+Component+Status+Library+Reported+Owner+Summary+Modified&sort=-modified&groupby=&mode=grid&y=Proj&x=--&cells=ids&nobtn=Update
.. _`AFL`: http://lcamtuf.coredump.cx/afl/
.. _`libFuzzer`: https://llvm.org/docs/LibFuzzer.html
.. _`ASAN`: https://clang.llvm.org/docs/AddressSanitizer.html
.. _`Rust`: https://www.rust-lang.org/
.. _`my employer`: https://wiki.mozilla.org/Oxidation#Rust_components_in_Firefox
.. _`"Smashing the Stack for Fun and Profit"`: http://www-inst.eecs.berkeley.edu/~cs161/fa08/papers/stack_smashing.pdf
.. _`stack-buffer-overflow in Chrome`: https://chromereleases.googleblog.com/2017/11/stable-channel-update-for-desktop.html
